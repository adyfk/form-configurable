[
  {
    "op": "+",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs addition: a + b"
  },
  {
    "op": "ADD",
    "fix": "prefix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs addition: ADD(a, b) = a + b"
  },
  {
    "op": "*",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs multiplication: a * b"
  },
  {
    "op": "MUL",
    "fix": "prefix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs multiplication: MUL(a, b) = a * b"
  },
  {
    "op": "-",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs subtraction: a - b"
  },
  {
    "op": "SUB",
    "fix": "prefix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs subtraction: SUB(a, b) = a - b"
  },
  {
    "op": "/",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs division: a / b"
  },
  {
    "op": "DIV",
    "fix": "prefix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs division: DIV(a, b) = a / b"
  },
  {
    "op": ",",
    "fix": "infix",
    "sig": ["a", "b", "Arguments"],
    "text": "Returns an array of arguments with b appended to a. If a is not an argument array, it is automatically appended to an empty array."
  },
  {
    "op": "MOD",
    "fix": "prefix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs modulo operation: MOD(a, b). (equivalent to a % b)"
  },
  {
    "op": "%",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs modulo operation: a % b. (equivalent to MOD(a, b))"
  },
  {
    "op": "=",
    "fix": "infix",
    "sig": ["a", "b", "Boolean"],
    "text": "Returns TRUE if a = b. Otherwise returns FALSE."
  },
  {
    "op": "!=",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Returns FALSE if a = b. Otherwise returns TRUE. (equivalent to <>)"
  },
  {
    "op": "<>",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Returns FALSE if a = b. Otherwise returns TRUE. (equivalent to !=)"
  },
  {
    "op": "~=",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Returns TRUE if ABS(a - b) < EPSILON. Otherwise returns FALSE."
  },
  {
    "op": ">",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Boolean"],
    "text": "Performs greater-than operation: a > b"
  },
  {
    "op": "<",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Boolean"],
    "text": "Performs less-than operation: a < b"
  },
  {
    "op": ">=",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Boolean"],
    "text": "Performs greater-than-or-equal operation: a >= b"
  },
  {
    "op": "<=",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Boolean"],
    "text": "Performs less-than-or-equal operation: a <= b"
  },
  {
    "op": "AND",
    "fix": "infix",
    "sig": ["a: Boolean", "b: Boolean", "Boolean"],
    "text": "Performs logical AND: a AND b."
  },
  {
    "op": "OR",
    "fix": "infix",
    "sig": ["a: Boolean", "b: Boolean", "Boolean"],
    "text": "Performs logical OR: a OR b."
  },
  {
    "op": "^",
    "fix": "infix",
    "sig": ["a: Number", "b: Number", "Number"],
    "text": "Performs exponentiation (a to the power of b): a ^ b"
  },
  {
    "op": "NEG",
    "fix": "prefix",
    "sig": ["value: Number", "Number"],
    "text": "Performs negation of the value: NEG(value). (equivalent to -value)"
  },
  {
    "op": "-",
    "fix": "prefix",
    "sig": ["value: Number", "Number"],
    "text": "Performs negation of the value: -value. Note: no space can be present before \"value\". (equivalent to NEG(value))"
  },
  {
    "op": "NOT",
    "fix": "prefix",
    "sig": ["value: Boolean", "Boolean"],
    "text": "Performs logical NOT of the value: NOT(value). (equivalent to !value)"
  },
  {
    "op": "!",
    "fix": "prefix",
    "sig": ["value: Boolean", "Boolean"],
    "text": "Performs logical NOT of the value: !value. (equivalent to NOT(value))"
  },
  {
    "op": "ABS",
    "fix": "prefix",
    "sig": ["value: Number", "Number"],
    "text": "Returns the absolute value of the number: ABS(value)."
  },
  {
    "op": "DEGREES",
    "fix": "prefix",
    "sig": ["radians: Number", "Number"],
    "text": "Performs a conversion of radians to degrees: DEGREES(radians)."
  },
  {
    "op": "CEIL",
    "fix": "prefix",
    "sig": ["value: Number", "Number"],
    "text": "Returns the smallest integer greater-than or equal-to the number: CEIL(value)."
  },
  {
    "op": "FLOOR",
    "fix": "prefix",
    "sig": ["value: Number", "Number"],
    "text": "Returns the greatest integer less-than or equal-to the number: CEIL(value)."
  },
  {
    "op": "ROUND",
    "fix": "prefix",
    "sig": ["value: Number", "Number"],
    "text": "Returns the value rounded to the nearest integer: ROUND(value)."
  },
  {
    "op": "TRUNC",
    "fix": "prefix",
    "sig": ["value: Number", "Number"],
    "text": "Returns the integral part of the number, truncating any fractional digits: TRUNC(value)."
  },
  {
    "op": "SIGN",
    "fix": "prefix",
    "sig": ["value: Number", "Number"],
    "text": "Returns the sign of the value, indicating whether the number is positive (1) or negative (-1): SIGN(value)."
  },
  {
    "op": "ISNAN",
    "fix": "prefix",
    "sig": ["value", "Boolean"],
    "text": "Returns TRUE if a value is not a number (e.g. the result of an invalid mathematical operation), otherwise returns FALSE: ISNAN(value)."
  },
  {
    "op": "IF",
    "fix": "prefix",
    "sig": ["condition: Boolean", "then", "else", "result"],
    "text": "Tests the condition and returns the \"then\" value if the condition is TRUE, otherwise returns the \"else\" value: IF(condition, then, else)."
  },
  {
    "op": "AVERAGE",
    "fix": "prefix",
    "sig": ["values: Array of Numbers", "Number"],
    "text": "Returns the average (mean) of an array of numbers. AVERAGE(array)."
  },
  {
    "op": "SUM",
    "fix": "prefix",
    "sig": ["values: Array of Numbers", "Number"],
    "text": "Returns the sum of an array of numbers. SUM(array)."
  },
  {
    "op": "MIN",
    "fix": "prefix",
    "sig": ["values: Array of Numbers", "Number"],
    "text": "Returns the minimum value in an array of numbers. MIN(array)."
  },
  {
    "op": "MAX",
    "fix": "prefix",
    "sig": ["values: Array of Numbers", "Number"],
    "text": "Returns the maximum value in an array of numbers. MAX(array)."
  },
  {
    "op": "CHAR",
    "fix": "prefix",
    "sig": ["code: Integer", "String"],
    "text": "Returns a single-character string with a unicode character representing the value of the given code. CHAR(code)"
  },
  {
    "op": "CODE",
    "fix": "prefix",
    "sig": ["string: String", "Integer"],
    "text": "Returns the unicode value of the first character of a string: CODE(string)"
  },
  {
    "op": "UPPER",
    "fix": "prefix",
    "sig": ["string: String", "String"],
    "text": "Converts a string to uppercase: UPPER(string)."
  },
  {
    "op": "LOWER",
    "fix": "prefix",
    "sig": ["string: String", "String"],
    "text": "Converts a string to lowercase: LOWER(string)."
  },
  {
    "op": "SORT",
    "fix": "prefix",
    "sig": ["array: Array", "Array"],
    "text": "Returns a sorted array: SORT(array)."
  },
  {
    "op": "REVERSE",
    "fix": "prefix",
    "sig": ["array: Array", "Array"],
    "text": "Returns a reversed array: REVERSE(array)."
  },
  {
    "op": "INDEX",
    "fix": "prefix",
    "sig": ["array: Array", "i: Integer", "Value"],
    "text": "Returns the value at the given array index: INDEX(array, i)."
  },
  {
    "op": "LENGTH",
    "fix": "prefix",
    "sig": ["array: Array", "Integer"],
    "text": "Returns the length of an array: LENGTH(array)."
  },
  {
    "op": "JOIN",
    "fix": "prefix",
    "sig": ["array: Array", "separator: String", "String"],
    "text": "Joins each array element into a string, using a separator: JOIN(array, separator)."
  },
  {
    "op": "SPLIT",
    "fix": "prefix",
    "sig": ["string: String", "separator: String", "Array"],
    "text": "Splits a string into an array of characters, using a separator: SPLIT(string, separator)."
  },
  {
    "op": "STRING",
    "fix": "prefix",
    "sig": ["array: Array", "String"],
    "text": "Converts an array into a string: STRING(array)."
  },
  {
    "op": "CHARARRAY",
    "fix": "prefix",
    "sig": ["string: String", "Array"],
    "text": "Converts a string into an array of characters: CHARARRAY(string)"
  },
  {
    "op": "ARRAY",
    "fix": "prefix",
    "sig": ["arguments...", "Array"],
    "text": "Converts arguments into an array: ARRAY(a, b, c, ...)."
  },
  {
    "op": "MAP",
    "fix": "prefix",
    "sig": ["mapper: Reference", "array: Array", "Array"],
    "text": "Performs a mapper function on each element of the array: MAP(mapper, array)."
  },
  {
    "op": "REDUCE",
    "fix": "prefix",
    "sig": ["reducer: Reference", "start", "array: Array", "Array"],
    "text": "Performs a reducer function on each pair of array elements, using \"start\" as its starting value: REDUCE(reducer, array)."
  },
  {
    "op": "RANGE",
    "fix": "prefix",
    "sig": ["start: Integer", "limit: Integer", "Array"],
    "text": "Creates an array of integers, incrementing from start (included) to the limit (excluded): RANGE(start, limit)"
  },
  {
    "op": "ZIP",
    "fix": "prefix",
    "sig": [
      "array1: Array",
      "array2: Array",
      "Array of [array1[i], array2[i]]"
    ],
    "text": "Combines two arrays into a single array of both values, paired at their respective position: ZIP(array1, array2)"
  },
  {
    "op": "UNZIP",
    "fix": "prefix",
    "sig": ["array: Array of [a, b]", "[Array of a, Array of b]"],
    "text": "Splits a single array of pairs into two arrays with values at their respective positions: UNZIP(array)"
  },
  {
    "op": "TAKE",
    "fix": "prefix",
    "sig": ["n: Integer", "Array"],
    "text": "Takes the first n values from the array: TAKE(n, array)"
  },
  {
    "op": "DROP",
    "fix": "prefix",
    "sig": ["n: Integer", "Array"],
    "text": "Drops the first n values from the array: DROP(n, array)"
  },
  {
    "op": "SLICE",
    "fix": "prefix",
    "sig": ["startIndex: Integer", "limitIndex: Integer", "Array"],
    "text": "Slices an array from startIndex to (but not including) limitIndex: SLICE(startIndex, limitIndex, array)"
  },
  {
    "op": "CONCAT",
    "fix": "prefix",
    "sig": ["array1: Array", "array2: Array", "Array"],
    "text": "Concatenates two arrays into one: CONCAT(array1, array2)"
  },
  {
    "op": "HEAD",
    "fix": "prefix",
    "sig": ["array: Array", "Value"],
    "text": "Retrieves the first element of an array: HEAD(array)"
  },
  {
    "op": "TAIL",
    "fix": "prefix",
    "sig": ["array: Array", "Array"],
    "text": "Returns the array without the first element: TAIL(array)"
  },
  {
    "op": "LAST",
    "fix": "prefix",
    "sig": ["array: Array", "Value"],
    "text": "Retrieves the last element of an array: HEAD(array)"
  },
  {
    "op": "CONS",
    "fix": "prefix",
    "sig": ["head: Value", "array: Array", "Array"],
    "text": "Returns an array with a new value at the first position: CONS(head, array)"
  },
  {
    "op": "FILTER",
    "fix": "prefix",
    "sig": ["filter: Reference", "array: Array", "Array"],
    "text": "Returns an array of all elements for which 'filter(element)' returns true: FILTER(filter, array)."
  },
  {
    "op": "TAKEWHILE",
    "fix": "prefix",
    "sig": ["check: Reference", "array: Array", "Array"],
    "text": "Returns a new array of all elements up until 'check(element)' returns false: TAKEWHILE(check, array)."
  },
  {
    "op": "DROPWHILE",
    "fix": "prefix",
    "sig": ["check: Reference", "array: Array", "Array"],
    "text": "Returns a new array skipping all elements up until 'check(element)' returns false: DROPWHILE(check, array)."
  },
  {
    "op": "GET",
    "fix": "prefix",
    "sig": ["key: String", "dict: Dictionary", "Value"],
    "text": "Retrieves the value of the associated key in a dictionary: GET(key, dict)"
  },
  {
    "op": "PUT",
    "fix": "prefix",
    "sig": ["key: String", "value: Value", "dict: Dictionary", "Dictionary"],
    "text": "Returns a dictionary with the key set to a new value: PUT(key, value, dict)"
  },
  {
    "op": "DICT",
    "fix": "prefix",
    "sig": ["keys: Array", "values: Array", "Dictionary"],
    "text": "Constructs a new dictionary out of an array of keys and a corresponding array of values: DICT(keys, values)"
  },
  {
    "op": "UNZIPDICT",
    "fix": "prefix",
    "sig": ["keyValuePairs: Array", "Dictionary"],
    "text": "Constructs a new dictionary out of an array of [key, value] pairs: UNZIPDICT(keyValuePairs)"
  },
  {
    "op": "KEYS",
    "fix": "prefix",
    "sig": ["dict: Dictionary", "Array"],
    "text": "Returns all the keys of a dictionary in alphabetical order: KEYS(dict)"
  },
  {
    "op": "VALUES",
    "fix": "prefix",
    "sig": ["dict: Dictionary", "Array"],
    "text": "Returns all the values of a dictionary, in alphabetical order of their keys: VALUES(dict)"
  },
  {
    "op": "[...]",
    "fix": "surround",
    "sig": ["arguments...", "Array"],
    "text": "Converts arguments into an array: [a, b, c, ...]."
  }
]
